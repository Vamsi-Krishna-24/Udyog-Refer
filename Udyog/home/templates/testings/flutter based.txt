// lib/login_screen.dart
// Flutter >=3.19
// pubspec.yaml -----> add:
// dependencies:
//   http: ^1.2.2
//   shared_preferences: ^2.3.2
//   url_launcher: ^6.3.1

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:url_launcher/url_launcher.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  // ----- CONFIG -----
  // !!! Set this to your backend base. For Android emulator use http://10.0.2.2:8000
  // For iOS simulator use http://127.0.0.1:8000 or your LAN IP on real devices.
  static const String apiBase = 'http://127.0.0.1:8000';
  static const String loginPath = '/api/login/';

  // ----- STATE -----
  final _formKey = GlobalKey<FormState>();
  final _email = TextEditingController();
  final _password = TextEditingController();
  bool _loading = false;
  String? _error;

  // ----- UI THEME HELPERS -----
  BoxDecoration _cardDeco() => BoxDecoration(
        color: const Color(0xFF0f172a).withOpacity(0.70), // #0f172a / 70%
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: Colors.white.withOpacity(0.10)),
        boxShadow: const [
          BoxShadow(
            blurRadius: 30,
            spreadRadius: 0,
            color: Colors.black54,
            offset: Offset(0, 10),
          ),
        ],
      );

  LinearGradient _bgGradient() => const LinearGradient(
        begin: Alignment.centerLeft,
        end: Alignment.centerRight,
        colors: [
          Color(0xFF1e40af), // roughly tailwind blue-800
          Color(0xFF1e3a8a), // blue-900
          Color(0xFF0f172a), // slate-900
        ],
      );

  InputDecoration _inputDeco(String hint) => InputDecoration(
        hintText: hint,
        hintStyle: const TextStyle(color: Color(0xFF9ca3af)), // placeholder-gray-400
        filled: true,
        fillColor: const Color(0xFF1e293b), // #1e293b
        contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF374151)), // border-gray-700
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF2563eb), width: 2), // ring-blue-500
        ),
      );

  // ----- ACTIONS -----
  Future<void> _login() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _loading = true;
      _error = null;
    });

    try {
      final uri = Uri.parse('$apiBase$loginPath');
      final res = await http.post(
        uri,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'email': _email.text.trim(),
          'password': _password.text.trim(),
        }),
      );

      final data = jsonDecode(res.body);

      if (res.statusCode >= 200 && res.statusCode < 300) {
        // Save tokens and profile
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('access_token', data['access'] ?? '');
        await prefs.setString('refresh_token', data['refresh'] ?? '');
        await prefs.setString('username', data['username'] ?? '');
        await prefs.setString('email', data['email'] ?? '');
        await prefs.setString('role', data['role'] ?? '');
        await prefs.setString('id', (data['id'] ?? '').toString());

        // Handle redirect from API
        final redirect = (data['redirect'] ?? '').toString();
        if (redirect.isNotEmpty) {
          if (redirect.startsWith('http')) {
            final ok = await launchUrl(Uri.parse(redirect), mode: LaunchMode.externalApplication);
            if (!ok && mounted) {
              setState(() => _error = 'Could not open redirect URL.');
            }
          } else {
            if (!mounted) return;
            // Expect you to register named routes matching your backend paths if you want in-app nav.
            // Example: MaterialApp(routes: {'/referrer_home': (_) => ReferrerHome()})
            Navigator.of(context).pushReplacementNamed(redirect);
          }
        }
      } else {
        setState(() => _error = (data['detail'] ?? 'Login failed.') as String);
      }
    } catch (e) {
      setState(() => _error = 'Network error. ${e.runtimeType}');
    } finally {
      if (mounted) setState(() => _loading = false);
    }
  }

  // ----- WIDGETS -----
  Widget _header() {
    return Column(
      children: const [
        Text('Udyog Refer',
            style: TextStyle(fontSize: 28, fontWeight: FontWeight.w600, color: Colors.white)),
        SizedBox(height: 6),
        Text('Find Jobs Through Trusted Referrals',
            style: TextStyle(fontSize: 12, color: Color(0xFFd1d5db))),
      ],
    );
  }

  Widget _socialBtn({required String label, required String assetUrl, VoidCallback? onTap}) {
    return InkWell(
      onTap: onTap, // TODO: wire Google/LinkedIn OAuth if needed
      child: Container(
        height: 48,
        decoration: BoxDecoration(
          color: const Color(0xFF1e293b),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: const Color(0xFF374151)),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.network(assetUrl, width: 20, height: 20),
            const SizedBox(width: 8),
            Text(label, style: const TextStyle(color: Color(0xFFe5e7eb), fontWeight: FontWeight.w500)),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _email.dispose();
    _password.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(gradient: _bgGradient()),
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 440),
            child: Container(
              padding: const EdgeInsets.all(24),
              decoration: _cardDeco(),
              child: Form(
                key: _formKey,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    _header(),
                    const SizedBox(height: 20),

                    // Email
                    TextFormField(
                      controller: _email,
                      style: const TextStyle(color: Colors.white),
                      decoration: _inputDeco('Email'),
                      keyboardType: TextInputType.emailAddress,
                      validator: (v) => (v == null || v.trim().isEmpty) ? 'Email required' : null,
                    ),
                    const SizedBox(height: 12),

                    // Password
                    TextFormField(
                      controller: _password,
                      obscureText: true,
                      style: const TextStyle(color: Colors.white),
                      decoration: _inputDeco('Password'),
                      validator: (v) => (v == null || v.isEmpty) ? 'Password required' : null,
                    ),
                    const SizedBox(height: 12),

                    // Error
                    if (_error != null)
                      Padding(
                        padding: const EdgeInsets.only(bottom: 6),
                        child: Text(
                          _error!,
                          textAlign: TextAlign.center,
                          style: const TextStyle(color: Color(0xFFf87171), fontSize: 12),
                        ),
                      ),

                    // Login button
                    SizedBox(
                      width: double.infinity,
                      height: 48,
                      child: ElevatedButton(
                        onPressed: _loading ? null : _login,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: const Color(0xFF2563eb),
                          disabledBackgroundColor: const Color(0xFF1d4ed8),
                          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                        ),
                        child: _loading
                            ? const SizedBox(
                                width: 18, height: 18, child: CircularProgressIndicator(strokeWidth: 2))
                            : const Text('Log in',
                                style: TextStyle(fontWeight: FontWeight.w600, color: Colors.white)),
                      ),
                    ),

                    const SizedBox(height: 16),

                    // OR separator
                    Row(
                      children: const [
                        Expanded(child: Divider(color: Color(0xFF6b7280))),
                        Padding(
                          padding: EdgeInsets.symmetric(horizontal: 8),
                          child: Text('OR', style: TextStyle(color: Color(0xFF9ca3af))),
                        ),
                        Expanded(child: Divider(color: Color(0xFF6b7280))),
                      ],
                    ),

                    const SizedBox(height: 16),

                    // Social buttons (placeholders)
                    _socialBtn(
                      label: 'Continue with Google',
                      assetUrl: 'https://www.svgrepo.com/show/475656/google-color.svg',
                      onTap: () {
                        setState(() => _error = 'Google OAuth not wired yet.');
                      },
                    ),
                    const SizedBox(height: 10),
                    _socialBtn(
                      label: 'Continue with LinkedIn',
                      assetUrl: 'https://www.svgrepo.com/show/448234/linkedin.svg',
                      onTap: () {
                        setState(() => _error = 'LinkedIn OAuth not wired yet.');
                      },
                    ),

                    const SizedBox(height: 14),

                    // Signup link (navigate using your routes)
                    GestureDetector(
                      onTap: () => Navigator.of(context).pushNamed('/signup'),
                      child: const Text.rich(
                        TextSpan(
                          text: "Don’t have an account? ",
                          style: TextStyle(color: Color(0xFF9ca3af), fontSize: 12),
                          children: [
                            TextSpan(
                              text: 'Sign up',
                              style: TextStyle(color: Color(0xFF60a5fa), decoration: TextDecoration.underline),
                            ),
                          ],
                        ),
                      ),
                    )
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
